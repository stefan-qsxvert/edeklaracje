package com.test.edeklaracje;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.0
 * 2024-12-03T22:48:20.463+01:00
 * Generated source version: 4.0.0
 *
 */
@WebServiceClient(name = "GateService",
                  wsdlLocation = "https://test-bramka.edeklaracje.gov.pl/uslugi/dokumenty?wsdl",
                  targetNamespace = "https://bramka.e-deklaracje.mf.gov.pl/")
public class GateService extends Service {

    public static URI WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://bramka.e-deklaracje.mf.gov.pl/", "GateService");
    public final static QName GateServiceSOAP11Port = new QName("https://bramka.e-deklaracje.mf.gov.pl/", "GateServiceSOAP11port");
    public final static QName GateServiceSOAP12Port = new QName("https://bramka.e-deklaracje.mf.gov.pl/", "GateServiceSOAP12port");
    static {
        URI uri = null;
        try {
            uri = new URI("https://test-bramka.edeklaracje.gov.pl/uslugi/dokumenty?wsdl");
            WSDL_LOCATION= uri;
        } catch (URISyntaxException e) {
            java.util.logging.Logger.getLogger(GateService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://test-bramka.edeklaracje.gov.pl/uslugi/dokumenty?wsdl");
        }
        
    }

    public GateService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public GateService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public GateService() throws MalformedURLException {
        super(WSDL_LOCATION.toURL(), SERVICE);
    }

    public GateService(WebServiceFeature ... features) throws MalformedURLException {
        super(WSDL_LOCATION.toURL(), SERVICE, features);
    }

    public GateService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public GateService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns GateServicePortType
     */
    @WebEndpoint(name = "GateServiceSOAP11port")
    public GateServicePortType getGateServiceSOAP11Port() {
        return super.getPort(GateServiceSOAP11Port, GateServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GateServicePortType
     */
    @WebEndpoint(name = "GateServiceSOAP11port")
    public GateServicePortType getGateServiceSOAP11Port(WebServiceFeature... features) {
        return super.getPort(GateServiceSOAP11Port, GateServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns GateServicePortType
     */
    @WebEndpoint(name = "GateServiceSOAP12port")
    public GateServicePortType getGateServiceSOAP12Port() {
        return super.getPort(GateServiceSOAP12Port, GateServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GateServicePortType
     */
    @WebEndpoint(name = "GateServiceSOAP12port")
    public GateServicePortType getGateServiceSOAP12Port(WebServiceFeature... features) {
        return super.getPort(GateServiceSOAP12Port, GateServicePortType.class, features);
    }

}
